//
//  ColorViewController.swift
//  ColorPop
//
//  Created by Raymond Law on 3/20/19.
//  Copyright (c) 2019 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ColorDisplayLogic: class
{
  func displayAvailableColors(viewModel: Color.ShowAvailableColors.ViewModel)
}

class ColorViewController: UITableViewController, ColorDisplayLogic
{
  var interactor: ColorBusinessLogic?
  var router: (NSObjectProtocol & ColorRoutingLogic & ColorDataPassing)?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ColorInteractor()
    let presenter = ColorPresenter()
    let router = ColorRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    showAvailableColors()
  }
  
  // MARK: Table view
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return colors.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let color = colors[indexPath.row]
    var cell = tableView.dequeueReusableCell(withIdentifier: "ColorCell")
    if cell == nil {
      cell = UITableViewCell(style: .value1, reuseIdentifier: "ColorCell")
    }
    cell?.backgroundColor = color
    return cell!
  }
  
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  {
    interactor?.selectedColor = colors[indexPath.row]
    router?.routeToSecond(segue: nil)
  }
  
  // MARK: Show available colors
  
  var colors = [UIColor]()
  
  func showAvailableColors()
  {
    let request = Color.ShowAvailableColors.Request()
    interactor?.showAvailableColors(request: request)
  }
  
  func displayAvailableColors(viewModel: Color.ShowAvailableColors.ViewModel)
  {
    colors = viewModel.colors
    tableView.reloadData()
  }
}
